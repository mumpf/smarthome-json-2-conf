{
    "$schema": "http://json-schema.org/draft-04/schema",
    "type": "object",
    "title": "BLIND: Verschattungs-Plugin",
    "definitions": {
        "value": {
            "type": [
                "boolean",
                "number",
                "string"
            ],
            "description": "Wert einer generischen Bedingung"
        },
        "rule": {
            "type": "object",
            "description": "Regel der State-Engine, beliebiger Name, sollte für die Visu sprechend sein",
            "additionalProperties": false,
            "properties": {
                "$order": {
                    "type": "integer",
                    "description": "Reihenfolge der Properties"
                },
                "description": {
                    "type": "string",
                    "description": "Beschreibung des Items"
                },
                "type": {
                    "description": "Typ des Positionsitems, immer foo",
                    "enum": [
                        "foo"
                    ]
                },
                "name": {
                    "description": "Name des Items",
                    "type": "string"
                },
                "as_use": {
                    "description": "Referenzitem, dessen Werte als default genutzt werden",
                    "type": "string"
                },
                "enter": {
                    "description": "Eingangsbedingungen, um den Zustand zu betreten",
                    "$ref": "#/definitions/condition"
                },
                "leave": {
                    "description": "Ausgangsbedingungen, um den Zustand zu verlassen",
                    "$ref": "#/definitions/condition"
                },
                "as_trigger_*": {
                "description": "Triggert eine Logik, wenn der Zustand erreicht ist im Format Logikname:Wert",
                "type": "string"
                },
                "as_set_*": {
                    "description": "Setzt ein Item, wenn dieser Zustand erreicht worden ist (* muss durch Namen ersetzt werden)",
                    "type": "string"
                },
                "as_byattr_*": {
                    "description": "Setzt ein Item mit dem Wert des Attributs, wenn dieser Zustand erreicht worden ist (* muss durch Namen ersetzt werden)",
                    "type": "string"
                },
                "as_delay_*": {
                    "description": "Verzögerung: Zeit (in s), die vergehen muss, bevor eine Änderung ausgeführt wird",
                    "type": "number"
                }
            },
            "patternProperties": {
                "^enter_.*$": {
                    "type": "object",
                    "$ref": "#/definitions/condition",
                    "description": "Eingangsbedingungen, um den Zustand zu betreten"
                },
                "^leave_.*$": {
                    "description": "Ausgangsbedingungen, um den Zustand zu verlassen",
                    "$ref": "#/definitions/condition"
                },
                "^as_set_[A-Z].*$": {
                    "description": "Setzt ein Item, wenn dieser Zustand erreicht worden ist",
                    "type": "string"
                    //"pattern": "^(value|eval|item|byattr):.*"
                },
                "as_trigger_.*": {
                    "description": "Triggert eine Logik, wenn der Zustand erreicht ist im Format Logikname:Wert",
                    "type": "string"
                }
            }
        },
        "condition": {
            "type": "object",
            "description": "Bedingungen, um einen Zustand zu betreten (enter) oder zu verlassen (leave)",
            "additionalProperties": false,
            "properties": {
                "description": {
                    "$ref": "ItemSchema.json#/definitions/smarthome_basic/properties/description"
                },
                "as_min_delay": {
                    "type": [ "integer", "string" ],
                    "description": "Untergrenze: Zeit (s), die vergangen sein muss, ohne dass irgendeine enter-Bedingung erfüllt ist"
                },
                "as_max_delay": {
                    "type": [ "integer", "string" ],
                    "description": "Obergrenze: Zeit (s), die vergangen sein muss, ohne dass irgendeine enter-Bedingung erfüllt ist"
                },
                "as_value_delay": {
                    "type": [ "integer", "string" ],
                    "description": "Zeit (s), die vergangen sein muss, ohne dass irgendeine enter-Bedingung erfüllt ist"
                },
                "as_negate_delay": {
                    "enum": [ true ],
                    "description": "Die Grenzen von min_delay und max_delay werden vertauscht ausgewertet"
                },
                "as_min_random": {
                    "type": [ "integer", "string" ],
                    "description": "Untergrenze: Zuffallszahl (0-100)",
                    "minimum": 0,
                    "maximum": 100
                },
                "as_max_random": {
                    "type": [ "integer", "string" ],
                    "description": "Obergrenze: Zuffallszahl (0-100)",
                    "minimum": 0,
                    "maximum": 100
                },
                "as_value_random": {
                    "type": [ "integer", "string" ],
                    "description": "Zuffallszahl (0-100)",
                    "minimum": 0,
                    "maximum": 100
                },
                "as_negate_random": {
                    "enum": [ true ],
                    "description": "Die Grenzen von min_random und max_random werden vertauscht ausgewertet"
                },
                "as_min_time": {
                    "type": "string",
                    "description": "Untergrenze für die Uhrzeit (Stunde, Minute)",
                    "pattern": "(value:)?(([0-1]\\d|2[0-3]):[0-5]\\d)|24:00|(eval|item):.*"
                },
                "as_max_time": {
                    "type": "string",
                    "description": "Obergrenze für die Uhrzeit (Stunde, Minute)",
                    "pattern": "(value:)?(([0-1]\\d|2[0-3]):[0-5]\\d)|24:00|(eval|item):.*"
                },
                "as_negate_time": {
                    "enum": [ true ],
                    "description": "Die Grenzen von min_time und max_time werden vertauscht ausgewertet"
                },
                "as_min_weekday": {
                    "type": [ "integer", "string" ],
                    "description": "Start-Wochentag (0=Montag, 6=Sonntag)",
                    "minimum": 0,
                    "maximum": 6
                },
                "as_max_weekday": {
                    "type": [ "integer", "string" ],
                    "description": "Ende-Wochentag (0=Montag, 6=Sonntag)",
                    "minimum": 0,
                    "maximum": 6
                },
                "as_negate_weekday": {
                    "enum": [ true ],
                    "description": "Die Grenzen von min_weekday und max_weekday werden vertauscht ausgewertet"
                },
                "as_min_sun_azimut": {
                    "type": [ "integer", "string" ],
                    "description": "Minimale Sonnenposition (Kompass-)Richtung: (0=N, 90=O, 180=S, 270=W)",
                    "minimum": 0,
                    "maximum": 360
                },
                "as_max_sun_azimut": {
                    "type": [ "integer", "string" ],
                    "description": "Maximale Sonnenposition (Kompass-)Richtung: (0=N, 90=O, 180=S, 270=W)",
                    "minimum": 0,
                    "maximum": 360
                },
                "as_negate_sun_azimut": {
                    "enum": [ true ],
                    "description": "Die Grenzen von min_sun_azimut und max_sun_azimut werden vertauscht ausgewertet"
                },
                "as_min_sun_altitude": {
                    "type": [ "integer", "string" ],
                    "description": "Minimale Sonnenhöhe: (0=Horizont, 90=Zenit)",
                    "minimum": 0,
                    "maximum": 90
                },
                "as_max_sun_altitude": {
                    "type": [ "integer", "string" ],
                    "description": "Maximale Sonnenhöhe: (0=Horizont, 90=Zenit)",
                    "minimum": 0,
                    "maximum": 90
                },
                "as_negate_sun_altitude": {
                    "enum": [ true ],
                    "description": "Die Grenzen von min_sun_altitude und max_sun_altitude werden vertauscht ausgewertet"
                },
                "as_min_age": {
                    "type": [ "integer", "string" ],
                    "description": "Minimale Zeit seit der letzten Positionsänderung in Sekunden",
                    "minimum": 0
                },
                "as_max_age": {
                    "type": [ "integer", "string" ],
                    "description": "Maximale Zeit seit der letzten Positionsänderung in Sekunden",
                    "minimum": 0
                },
                "as_negate_age": {
                    "enum": [ true ],
                    "description": "Die Grenzen von min_age und max_age werden vertauscht ausgewertet"
                },
                "as_value_laststate": {
                    "type": "string",
                    "description": "Item-Name des aktuellen Zustands (voll qualifiziert)"
                },
                "as_negate_laststate": {
                    "enum": [ true ],
                    "description": "laststate wird negiert"
                }
            },
            "patternProperties": {
                "^as_value_[A-Z].*$": {
                    "$ref": "#/definitions/value"
                },
                "^as_min_[A-Z].*$": {
                    "$ref": "#/definitions/value"
                },
                "^as_max_[A-Z].*$": {
                    "$ref": "#/definitions/value"
                },
                "^as_negate_[A-Z].*$": {
                    "description": "Negiert die entsprechende Bedingung",
                    "enum": [ true ]
                },
                "^as_agemin_[A-Z].*$": {
                    "description": "Minimalalter des Items in Sekunden",
                    "type": "integer"
                },
                "^as_agemax_[A-Z].*$": {
                    "description": "Maximalalter des Items in Sekunden",
                    "type": "integer"
                }
            }
        },
        "stateStore": {
            "description": "Letzter angesteuerter Zustand (Item)",
            "type": "object",
            "additionalProperties": false,
            "required": [
                "type",
                "cache"
            ],
            "properties": {
                "type": {
                    "enum": [ "str" ]
                },
                "visu_acl": {
                    "enum": [ "ro" ]
                },
              "cache": {
                "enum": [ true ]
                },
              "name": {
                "type": "string",
                "description": "Aufgabe dieser State-Engine"
                }
            }
        },
        "current": {
            "type": "object",
            "description": "Aktueller Status der State-Engine",
            "additionalProperties": false,
            "required": [
                "suspended",
                "lock",
                "stateId",
                "stateName",
                "manuell"
            ],
          "properties": {
            "$order": {
                    "$ref": "ItemSchema.json#/definitions/smarthome_basic/properties/%24order"
                },
            "suspended": {
              "description": "Staus: Automatik ist durch manuellen Eingriff deaktiviert",
              "$ref": "ItemSchema.json#/definitions/item"
            },
            "lock": {
              "description": "Sperren der Automatik",
              "$ref": "ItemSchema.json#/definitions/item"
            },
            "stateId": {
              "description": "Letzter angesteuerter Zustand (Item)",
              "$ref": "#/definitions/stateStore"
            },
            "stateName": {
              "description": "Letzter angesteuerter Zustand (Name)",
              "$ref": "#/definitions/stateStore"
            },
            "manuell": {
              "description": "Item fuer manuelle Bedienung. Auswertung mit eval_trigger",
              "$ref": "ItemSchema.json#/definitions/item"
            }
          }
        },
        "rules": {
            "type": "object",
            "description": "Regeln der State-Engine",
            "allOf": [
                {
                    "$ref": "ItemSchema.json#/definitions/smarthome_basic"
                },
                {
                    "patternProperties": {
                        "^[A-Z].*$": {
                            "type": "object",
                            "$ref": "#/definitions/rule"
                        },
                        "^as_item_[A-Z].*$": {
                            "description": "Referenz auf ein existierendes Item für generische Bedingungen",
                            "type": "string",
                            "$ref": "ItemSchema.json#/definitions/smarthome_basic/definitions/itemref"
                        },
                        "^as_eval_[A-Z].*$": {
                            "description": "Aufruf einer Funktion",
                            "type": "string"
                        },
                        "^as_mindelta_[A-Z].*$": {
                            "description": "Die minimale Wertänderung, bevor eine Änderung ausgeführt wird",
                            "type": "number"
                        }
                    },
                    "oneOf": [
                        {
                            "required": [
                                "type",
                                "as_plugin"
                            ]
                        },
                        {
                            "required": [
                                "$templated"
                            ]
                        }
                    ],
                    "properties": {
                        "$templated": {
                            "enum": [ true ]
                        },
                        "type": {
                            "enum": [ "bool" ]
                        },
                        "name": {
                            "type": "string",
                            "description": "Aufgabe dieser State-Engine"
                        },
                        "as_plugin": {
                            "description": "Deklariert diese Item als vom Autoblind-Plugin verwaltetes Item",
                            "enum": [
                                "active",
                                "default"
                            ]
                        },
                        "as_lock_item": {
                            "enum": [
                                "~~.State.lock"
                            ]
                        },
                        "as_suspend_item": {
                            "enum": [
                                "~~.State.suspended"
                            ]
                        },
                        "as_laststate_item_id": {
                            "enum": [
                                "~~.State.stateId"
                            ]
                        },
                        "as_laststate_item_name": {
                            "enum": [
                                "~~.State.stateName"
                            ]
                        },
                        "as_suspend_watch": {
                            "description": "Referenz auf ein oder mehrere Items zur manuellen Bedienung",
                            "$ref": "ItemSchema.json#/definitions/smarthome_basic/definitions/itemrefs"
                        },
                        "as_suspend_time": {
                            "description": "Rückfallzeit nach manueller Bedienung in Sekunden",
                            "type": "integer",
                            "minimum": 1
                        },
                      "as_startup_delay": {
                        "description": "Zeit bis zur ersten Auswertung in Sekunden",
                        "type": "integer",
                        "minimum": 1
                        },
                      "as_repeat_actions": {
                            "description": "Hiermit wird die wiederholte Ausführung von Aktionen unterdrückt, es werden nur aktionen ausgeführt, wenn sich der Wert geändert hat",
                            "enum": [ false ],
                            "default": true
                        }
                    }
                }
            ]
        }
    },
    "properties": {
        "autoBlind": {
            "type": "object",
            "description": "State-Engine settings",
            "additionalProperties": false,
            "properties": {
                "$template": {
                    "$ref": "ItemSchema.json#/definitions/template/properties/%24template"
                },
                "$delete": {
                    "$ref": "ItemSchema.json#/definitions/template/properties/%24delete"
                },
                "State": {
                    "$ref": "#/definitions/current"
                },
                "Rules": {
                    "$ref": "#/definitions/rules"
                }
            },
            "required": [
                "Rules"
            ]
        }
    }
}
